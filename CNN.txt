
# coding: utf-8

# In[1]:


import cv2
from matplotlib import pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
import pandas as pd

from keras.layers import Input, Activation, Conv2D, Flatten, Dense, MaxPooling2D, Dropout, Add, LeakyReLU
from keras.models import Model, load_model
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ModelCheckpoint

import datetime
import os, sys, glob


# In[2]:


ratings = pd.read_excel('/Users/yaningcui/Desktop/syde675_project/SCUT-FBP5500_v2/All_Ratings.xlsx')

filenames = ratings.groupby('Filename').size().index.tolist()

labels = []

for filename in filenames:
    df = ratings[ratings['Filename'] == filename]
    score = round(df['Rating'].mean(), 2)
    labels.append({'Filename': filename, 'score': score})

labels_df = pd.DataFrame(labels)


# In[3]:


labels_df.head()


# In[4]:


labels_df.columns[1]
labels_df.groupby(labels_df.columns[1]).count()


# In[5]:


labels_df.describe()


# In[8]:


labels_np = labels_df.values
print(labels_np.shape)


# In[9]:


# print(labels_np)


# In[10]:


x_total = np.empty((len(labels_np), 350, 350, 3), dtype=np.uint8)
y_total = np.empty((len(labels_np)), dtype=np.float32)

for i, (img_filename, rating) in enumerate(labels_np):
    img = cv2.imread(os.path.join('/Users/yaningcui/Desktop/syde675_project/SCUT-FBP5500_v2/Images', img_filename))
    
    if img.shape[0] != 350 or img.shape[1] != 350:
        print(img_filename)
        
    y = labels_df[labels_df.Filename == img_filename].score.values
        
    x_total[i] = img
    y_total[i] = y


# In[30]:


print(x_total.shape)


# In[12]:


print(y_total.shape)


# In[13]:


plt.figure(figsize=(16, 6))
for i, img in enumerate(x_total[:10]):
    plt.subplot(2, 5, i+1)
    plt.axis('off')
    plt.title('%.2f' % y_total[i])
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img)


# In[14]:


x_train_all, x_test, y_train_all, y_test = train_test_split(x_total, y_total, test_size=0.2, random_state=42)
x_train, x_val, y_train, y_val = train_test_split(x_train_all, y_train_all, test_size=0.2, random_state=42)


# In[15]:


print(x_train.shape, x_val.shape, x_test.shape)
print(y_train.shape, y_val.shape, y_test.shape)


# In[16]:


print(y_train)


# In[17]:


np.save('x_train.npy', x_train)
np.save('x_val.npy', x_val)
np.save('x_test.npy', x_test)
np.save('y_train.npy', y_train)
np.save('y_val.npy', y_val)
np.save('y_test.npy', y_test)


# In[18]:


x_train = np.load('x_train.npy')
y_train = np.load('y_train.npy')
x_val = np.load('x_val.npy')
y_val = np.load('y_val.npy')
x_test = np.load('x_test.npy')
y_test = np.load('y_test.npy')


# In[19]:


plt.figure(figsize=(16, 6))
for i, img in enumerate(x_train[:10]):
    plt.subplot(2, 5, i+1)
    plt.axis('off')
    plt.title('%.2f' % y_total[i])
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img)


# In[27]:


from keras.layers import Input, Activation, Conv2D, Flatten, Dense, MaxPooling2D, Dropout, Add, LeakyReLU
from keras.models import Model, load_model


# In[28]:


inputs = Input(shape=(350, 350, 3))

net = Conv2D(32, kernel_size=3, strides=1, padding='same')(inputs)
net = LeakyReLU()(net)
net = MaxPooling2D(pool_size=2)(net)

net = Conv2D(32, kernel_size=3, strides=1, padding='same')(net)
net = LeakyReLU()(net)
net = MaxPooling2D(pool_size=2)(net)

net = Conv2D(32, kernel_size=3, strides=1, padding='same')(net)
net = LeakyReLU()(net)
net = MaxPooling2D(pool_size=2)(net)

net = Conv2D(32, kernel_size=3, strides=1, padding='same')(net)
net = LeakyReLU()(net)
net = MaxPooling2D(pool_size=2)(net)

net = Conv2D(32, kernel_size=3, strides=1, padding='same')(net)
net = LeakyReLU()(net)
net = MaxPooling2D(pool_size=2)(net)

net = Flatten()(net)

net = Dense(256)(net)
net = Activation('relu')(net)
net = Dense(128)(net)
net = Activation('relu')(net)
net = Dense(1)(net)
outputs = Activation('linear')(net)

model = Model(inputs=inputs, outputs=outputs)

model.compile(optimizer='adam', loss='mae')

model.summary()


# In[31]:


history = model.fit(x = x_train, 
              y = y_train, 
              shuffle = True,
              batch_size=32, 
              epochs=20, 
              validation_data=(x_val, y_val))


# In[32]:


pred = model.predict(x_test)


# In[33]:


from sklearn.metrics import mean_squared_error, r2_score


# In[34]:


print("Mean squared error: %.2f" % mean_squared_error(y_test, pred))


# In[35]:


print('Variance score: %.2f' % r2_score(y_test, pred))


# In[40]:


plt.scatter(y_test, pred,  color='purple')
plt.plot(y_test, y_test, 'ro')

plt.xlabel('True label ')
plt.ylabel('Predicted label')

plt.savefig('cnn_network_perfromance.png')

plt.show()


# In[79]:


plt.hist(pred, bins =  [1,1.5,2,2.5,3,3.5,4,4.5,5],edgecolor="black",color='purple', alpha=0.8) 
plt.ylim((0, 500))
plt.title("Distribution of Predicted Values on Test Data") 
plt.savefig('cnn_Distribution_pred.png')
plt.show()


# In[80]:


plt.hist(y_test, bins =  [1,1.5,2,2.5,3,3.5,4,4.5,5],edgecolor="black",color='purple',alpha=0.6)
plt.ylim((0, 500))
plt.title("Distribution of Actual Values on Test Data") 
plt.savefig('cnn_Distribution_actual.png')
plt.show()


# In[93]:


plt.figure(figsize=(16, 6))
for i, img in enumerate(x_test[:10]):
    plt.subplot(2, 5, i+1)
    plt.axis('off')
    plt.title('%.2f / %.2f' % (pred[i], y_test[i]))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img)
    

